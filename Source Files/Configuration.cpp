#include "../Header Files/Configuration.h"

Configuration::Configuration(int argc, char** argv)
{
    this->command_line.AddValue("step-length", "The interval of time between each step in seconds.",
                                ns3::MakeCallback(&Configuration::SetStepLength, this));
    this->command_line.AddValue("sumo-url", "Name of the SUMO configuration to be used within this simulation.",
                                ns3::MakeCallback(&Configuration::SetSUMOURL, this));
    this->command_line.AddValue("remote-address", "Remote address used to connect to the TraCIAPI server.",
                                ns3::MakeCallback(&Configuration::SetRemoteAddress, this));
    this->command_line.AddValue("remote-port", "Remote port used to connect to the TraCIAPI server.",
                                ns3::MakeCallback(&Configuration::SetRemotePort, this));
    this->command_line.AddValue("animate", "Enable the NS-3 animation trace. Requires a XML file name.",
                                ns3::MakeCallback(&Configuration::SetAnimate, this));
    this->command_line.AddValue("selection-lanes", "Set the lanes where vehicles maybe selected from to change lane.",
                                ns3::MakeCallback(&Configuration::SetSelectionLanes, this));
    this->command_line.AddValue("selection-probability", "Set the probability maybe picked to change lane.",
                                ns3::MakeCallback(&Configuration::SetSelectionProbability, this));
    this->command_line.AddValue("selection-interval", "Set the selection interval.",
                                ns3::MakeCallback(&Configuration::SetSelectionInterval, this));
    this->command_line.AddValue("seed", "Set the seed for the RNG.",
                                ns3::MakeCallback(&Configuration::SetSeed, this));
    this->command_line.AddValue("speed-limits", "Set the speed for each of the five lanes. (ms/s).",
                                ns3::MakeCallback(&Configuration::SetSpeedLimits, this));
    this->command_line.AddValue("lane-change-output", "Set the name of lane change output generated by SUMO.",
                                ns3::MakeCallback(&Configuration::SetLaneChangeOutput, this));
    this->command_line.AddValue("trip-info-output", "Set the name of trip info output generated by SUMO.",
                                ns3::MakeCallback(&Configuration::SetTripInfoOutput, this));
    this->command_line.AddValue("use-enhanced", "Set to 'true' is you wish to simulate with ILACH-Plus otherwise ILACH.",
                                ns3::MakeCallback(&Configuration::SetUseEnhanced, this));
    this->command_line.Parse(argc, argv);
}

bool Configuration::SetStepLength(std::string Value)
{
    this->Step_Length = std::stod(Value);
    return true;
}

bool Configuration::SetSUMOURL(std::string Value)
{
    this->SUMO_URL = Value;
    return true;
}

bool Configuration::SetRemoteAddress(std::string Value)
{
    this->Remote_Address = Value;
    return true;
}

bool Configuration::SetRemotePort(std::string Value)
{
    this->Remote_Port = std::stoi(Value);
    return true;
}

bool Configuration::SetAnimate(std::string Value)
{
    this->Animation_URL = Value;
    return true;
}

bool Configuration::SetSelectionLanes(std::string Value)
{
    for(auto c : Value)
    {
        if(!isspace(c))
            this->Selection_Lanes.set((size_t)c - 48, true);
    }
    return true;
}

bool Configuration::SetSelectionProbability(std::string Value)
{
    this->Selection_Probability = std::stod(Value);
    return true;
}

bool Configuration::SetSelectionInterval(std::string Value)
{
    this->Selection_Interval = std::stoi(Value);
    return true;
}

bool Configuration::SetSeed(std::string Value)
{
    this->Seed = std::stoi(Value);
    return true;
}

bool Configuration::SetSpeedLimits(std::string Value)
{
    this->Lane_Speed_Limits.clear();
    std::string speed;
    for(char c : Value)
    {
        if(!isspace(c))
        {
            speed.append(std::to_string(c - 48));
        }
        else
        {
            this->Lane_Speed_Limits.push_back(std::stod(speed));
            speed.clear();
        }
    }
    this->Lane_Speed_Limits.push_back(std::stod(speed));
    speed.clear();
    return true;
}

bool Configuration::SetLaneChangeOutput(std::string Value)
{
    this->Lane_Change_Output = Value;
    return true;
}

bool Configuration::SetTripInfoOutput(std::string Value)
{
    this->Trip_Info_Output = Value;
    return true;
}

bool Configuration::SetUseEnhanced(std::string Value) {
    if(Value == "true")
        this->Use_Enhanced = true;
    return true;
}